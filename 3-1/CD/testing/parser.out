Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration_list
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration -> INT ID_list SEMICOLON
Rule 5     declaration -> ID EQUALS expression SEMICOLON
Rule 6     declaration -> PRINTF LPAREN STRING RPAREN SEMICOLON
Rule 7     declaration -> PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON
Rule 8     declaration -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
Rule 9     declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE
Rule 10    declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
Rule 11    declaration -> WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE
Rule 12    ID_list -> ID_list COMMA ID
Rule 13    ID_list -> ID_list COMMA ID EQUALS expression
Rule 14    ID_list -> ID
Rule 15    ID_list -> ID EQUALS expression
Rule 16    expression -> expression PLUS term
Rule 17    expression -> expression MINUS term
Rule 18    expression -> expression TIMES term
Rule 19    expression -> expression DIVIDE term
Rule 20    expression -> expression MOD term
Rule 21    expression -> term
Rule 22    term -> LPAREN expression RPAREN
Rule 23    term -> NUMBER
Rule 24    term -> ID
Rule 25    condition -> expression EQUALS expression
Rule 26    condition -> expression NOT_EQUALS expression

Terminals, with rules where they appear

AMPERSAND            : 8
AND                  : 
COMMA                : 7 8 12 13
DIVIDE               : 19
ELSE                 : 10
EQUALS               : 5 13 15 25
ID                   : 5 8 12 13 14 15 24
IF                   : 9 10
INT                  : 4
LBRACE               : 9 10 10 11
LPAREN               : 6 7 8 9 10 11 22
MINUS                : 17
MOD                  : 20
NOT_EQUALS           : 26
NUMBER               : 23
OR                   : 
PLUS                 : 16
PRINTF               : 6 7
RBRACE               : 9 10 10 11
RPAREN               : 6 7 8 9 10 11 22
SCANF                : 8
SEMICOLON            : 4 5 6 7 8
STRING               : 6 7 8
TIMES                : 18
WHILE                : 11
error                : 

Nonterminals, with rules where they appear

ID_list              : 4 12 13
condition            : 9 10 11
declaration          : 2 3
declaration_list     : 1 2 9 10 10 11
expression           : 5 7 13 15 16 17 18 19 20 22 25 25 26 26
program              : 0
term                 : 16 17 18 19 20 21

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration_list
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . INT ID_list SEMICOLON
    (5) declaration -> . ID EQUALS expression SEMICOLON
    (6) declaration -> . PRINTF LPAREN STRING RPAREN SEMICOLON
    (7) declaration -> . PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON
    (8) declaration -> . SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (9) declaration -> . IF LPAREN condition RPAREN LBRACE declaration_list RBRACE
    (10) declaration -> . IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (11) declaration -> . WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE

    INT             shift and go to state 4
    ID              shift and go to state 5
    PRINTF          shift and go to state 6
    SCANF           shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    program                        shift and go to state 1
    declaration_list               shift and go to state 2
    declaration                    shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> declaration_list .
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . INT ID_list SEMICOLON
    (5) declaration -> . ID EQUALS expression SEMICOLON
    (6) declaration -> . PRINTF LPAREN STRING RPAREN SEMICOLON
    (7) declaration -> . PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON
    (8) declaration -> . SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (9) declaration -> . IF LPAREN condition RPAREN LBRACE declaration_list RBRACE
    (10) declaration -> . IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (11) declaration -> . WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE

    $end            reduce using rule 1 (program -> declaration_list .)
    INT             shift and go to state 4
    ID              shift and go to state 5
    PRINTF          shift and go to state 6
    SCANF           shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    declaration                    shift and go to state 10

state 3

    (3) declaration_list -> declaration .

    INT             reduce using rule 3 (declaration_list -> declaration .)
    ID              reduce using rule 3 (declaration_list -> declaration .)
    PRINTF          reduce using rule 3 (declaration_list -> declaration .)
    SCANF           reduce using rule 3 (declaration_list -> declaration .)
    IF              reduce using rule 3 (declaration_list -> declaration .)
    WHILE           reduce using rule 3 (declaration_list -> declaration .)
    $end            reduce using rule 3 (declaration_list -> declaration .)
    RBRACE          reduce using rule 3 (declaration_list -> declaration .)


state 4

    (4) declaration -> INT . ID_list SEMICOLON
    (12) ID_list -> . ID_list COMMA ID
    (13) ID_list -> . ID_list COMMA ID EQUALS expression
    (14) ID_list -> . ID
    (15) ID_list -> . ID EQUALS expression

    ID              shift and go to state 12

    ID_list                        shift and go to state 11

state 5

    (5) declaration -> ID . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 13


state 6

    (6) declaration -> PRINTF . LPAREN STRING RPAREN SEMICOLON
    (7) declaration -> PRINTF . LPAREN STRING COMMA expression RPAREN SEMICOLON

    LPAREN          shift and go to state 14


state 7

    (8) declaration -> SCANF . LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON

    LPAREN          shift and go to state 15


state 8

    (9) declaration -> IF . LPAREN condition RPAREN LBRACE declaration_list RBRACE
    (10) declaration -> IF . LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE

    LPAREN          shift and go to state 16


state 9

    (11) declaration -> WHILE . LPAREN condition RPAREN LBRACE declaration_list RBRACE

    LPAREN          shift and go to state 17


state 10

    (2) declaration_list -> declaration_list declaration .

    INT             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PRINTF          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    SCANF           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    RBRACE          reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 11

    (4) declaration -> INT ID_list . SEMICOLON
    (12) ID_list -> ID_list . COMMA ID
    (13) ID_list -> ID_list . COMMA ID EQUALS expression

    SEMICOLON       shift and go to state 18
    COMMA           shift and go to state 19


state 12

    (14) ID_list -> ID .
    (15) ID_list -> ID . EQUALS expression

    SEMICOLON       reduce using rule 14 (ID_list -> ID .)
    COMMA           reduce using rule 14 (ID_list -> ID .)
    EQUALS          shift and go to state 20


state 13

    (5) declaration -> ID EQUALS . expression SEMICOLON
    (16) expression -> . expression PLUS term
    (17) expression -> . expression MINUS term
    (18) expression -> . expression TIMES term
    (19) expression -> . expression DIVIDE term
    (20) expression -> . expression MOD term
    (21) expression -> . term
    (22) term -> . LPAREN expression RPAREN
    (23) term -> . NUMBER
    (24) term -> . ID

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 25
    ID              shift and go to state 21

    expression                     shift and go to state 22
    term                           shift and go to state 23

state 14

    (6) declaration -> PRINTF LPAREN . STRING RPAREN SEMICOLON
    (7) declaration -> PRINTF LPAREN . STRING COMMA expression RPAREN SEMICOLON

    STRING          shift and go to state 26


state 15

    (8) declaration -> SCANF LPAREN . STRING COMMA AMPERSAND ID RPAREN SEMICOLON

    STRING          shift and go to state 27


state 16

    (9) declaration -> IF LPAREN . condition RPAREN LBRACE declaration_list RBRACE
    (10) declaration -> IF LPAREN . condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (25) condition -> . expression EQUALS expression
    (26) condition -> . expression NOT_EQUALS expression
    (16) expression -> . expression PLUS term
    (17) expression -> . expression MINUS term
    (18) expression -> . expression TIMES term
    (19) expression -> . expression DIVIDE term
    (20) expression -> . expression MOD term
    (21) expression -> . term
    (22) term -> . LPAREN expression RPAREN
    (23) term -> . NUMBER
    (24) term -> . ID

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 25
    ID              shift and go to state 21

    condition                      shift and go to state 28
    expression                     shift and go to state 29
    term                           shift and go to state 23

state 17

    (11) declaration -> WHILE LPAREN . condition RPAREN LBRACE declaration_list RBRACE
    (25) condition -> . expression EQUALS expression
    (26) condition -> . expression NOT_EQUALS expression
    (16) expression -> . expression PLUS term
    (17) expression -> . expression MINUS term
    (18) expression -> . expression TIMES term
    (19) expression -> . expression DIVIDE term
    (20) expression -> . expression MOD term
    (21) expression -> . term
    (22) term -> . LPAREN expression RPAREN
    (23) term -> . NUMBER
    (24) term -> . ID

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 25
    ID              shift and go to state 21

    condition                      shift and go to state 30
    expression                     shift and go to state 29
    term                           shift and go to state 23

state 18

    (4) declaration -> INT ID_list SEMICOLON .

    INT             reduce using rule 4 (declaration -> INT ID_list SEMICOLON .)
    ID              reduce using rule 4 (declaration -> INT ID_list SEMICOLON .)
    PRINTF          reduce using rule 4 (declaration -> INT ID_list SEMICOLON .)
    SCANF           reduce using rule 4 (declaration -> INT ID_list SEMICOLON .)
    IF              reduce using rule 4 (declaration -> INT ID_list SEMICOLON .)
    WHILE           reduce using rule 4 (declaration -> INT ID_list SEMICOLON .)
    $end            reduce using rule 4 (declaration -> INT ID_list SEMICOLON .)
    RBRACE          reduce using rule 4 (declaration -> INT ID_list SEMICOLON .)


state 19

    (12) ID_list -> ID_list COMMA . ID
    (13) ID_list -> ID_list COMMA . ID EQUALS expression

    ID              shift and go to state 31


state 20

    (15) ID_list -> ID EQUALS . expression
    (16) expression -> . expression PLUS term
    (17) expression -> . expression MINUS term
    (18) expression -> . expression TIMES term
    (19) expression -> . expression DIVIDE term
    (20) expression -> . expression MOD term
    (21) expression -> . term
    (22) term -> . LPAREN expression RPAREN
    (23) term -> . NUMBER
    (24) term -> . ID

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 25
    ID              shift and go to state 21

    expression                     shift and go to state 32
    term                           shift and go to state 23

state 21

    (24) term -> ID .

    SEMICOLON       reduce using rule 24 (term -> ID .)
    PLUS            reduce using rule 24 (term -> ID .)
    MINUS           reduce using rule 24 (term -> ID .)
    TIMES           reduce using rule 24 (term -> ID .)
    DIVIDE          reduce using rule 24 (term -> ID .)
    MOD             reduce using rule 24 (term -> ID .)
    EQUALS          reduce using rule 24 (term -> ID .)
    NOT_EQUALS      reduce using rule 24 (term -> ID .)
    COMMA           reduce using rule 24 (term -> ID .)
    RPAREN          reduce using rule 24 (term -> ID .)


state 22

    (5) declaration -> ID EQUALS expression . SEMICOLON
    (16) expression -> expression . PLUS term
    (17) expression -> expression . MINUS term
    (18) expression -> expression . TIMES term
    (19) expression -> expression . DIVIDE term
    (20) expression -> expression . MOD term

    SEMICOLON       shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    MOD             shift and go to state 38


state 23

    (21) expression -> term .

    SEMICOLON       reduce using rule 21 (expression -> term .)
    PLUS            reduce using rule 21 (expression -> term .)
    MINUS           reduce using rule 21 (expression -> term .)
    TIMES           reduce using rule 21 (expression -> term .)
    DIVIDE          reduce using rule 21 (expression -> term .)
    MOD             reduce using rule 21 (expression -> term .)
    EQUALS          reduce using rule 21 (expression -> term .)
    NOT_EQUALS      reduce using rule 21 (expression -> term .)
    COMMA           reduce using rule 21 (expression -> term .)
    RPAREN          reduce using rule 21 (expression -> term .)


state 24

    (22) term -> LPAREN . expression RPAREN
    (16) expression -> . expression PLUS term
    (17) expression -> . expression MINUS term
    (18) expression -> . expression TIMES term
    (19) expression -> . expression DIVIDE term
    (20) expression -> . expression MOD term
    (21) expression -> . term
    (22) term -> . LPAREN expression RPAREN
    (23) term -> . NUMBER
    (24) term -> . ID

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 25
    ID              shift and go to state 21

    expression                     shift and go to state 39
    term                           shift and go to state 23

state 25

    (23) term -> NUMBER .

    SEMICOLON       reduce using rule 23 (term -> NUMBER .)
    PLUS            reduce using rule 23 (term -> NUMBER .)
    MINUS           reduce using rule 23 (term -> NUMBER .)
    TIMES           reduce using rule 23 (term -> NUMBER .)
    DIVIDE          reduce using rule 23 (term -> NUMBER .)
    MOD             reduce using rule 23 (term -> NUMBER .)
    EQUALS          reduce using rule 23 (term -> NUMBER .)
    NOT_EQUALS      reduce using rule 23 (term -> NUMBER .)
    COMMA           reduce using rule 23 (term -> NUMBER .)
    RPAREN          reduce using rule 23 (term -> NUMBER .)


state 26

    (6) declaration -> PRINTF LPAREN STRING . RPAREN SEMICOLON
    (7) declaration -> PRINTF LPAREN STRING . COMMA expression RPAREN SEMICOLON

    RPAREN          shift and go to state 40
    COMMA           shift and go to state 41


state 27

    (8) declaration -> SCANF LPAREN STRING . COMMA AMPERSAND ID RPAREN SEMICOLON

    COMMA           shift and go to state 42


state 28

    (9) declaration -> IF LPAREN condition . RPAREN LBRACE declaration_list RBRACE
    (10) declaration -> IF LPAREN condition . RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE

    RPAREN          shift and go to state 43


state 29

    (25) condition -> expression . EQUALS expression
    (26) condition -> expression . NOT_EQUALS expression
    (16) expression -> expression . PLUS term
    (17) expression -> expression . MINUS term
    (18) expression -> expression . TIMES term
    (19) expression -> expression . DIVIDE term
    (20) expression -> expression . MOD term

    EQUALS          shift and go to state 44
    NOT_EQUALS      shift and go to state 45
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    MOD             shift and go to state 38


state 30

    (11) declaration -> WHILE LPAREN condition . RPAREN LBRACE declaration_list RBRACE

    RPAREN          shift and go to state 46


state 31

    (12) ID_list -> ID_list COMMA ID .
    (13) ID_list -> ID_list COMMA ID . EQUALS expression

    SEMICOLON       reduce using rule 12 (ID_list -> ID_list COMMA ID .)
    COMMA           reduce using rule 12 (ID_list -> ID_list COMMA ID .)
    EQUALS          shift and go to state 47


state 32

    (15) ID_list -> ID EQUALS expression .
    (16) expression -> expression . PLUS term
    (17) expression -> expression . MINUS term
    (18) expression -> expression . TIMES term
    (19) expression -> expression . DIVIDE term
    (20) expression -> expression . MOD term

    SEMICOLON       reduce using rule 15 (ID_list -> ID EQUALS expression .)
    COMMA           reduce using rule 15 (ID_list -> ID EQUALS expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    MOD             shift and go to state 38


state 33

    (5) declaration -> ID EQUALS expression SEMICOLON .

    INT             reduce using rule 5 (declaration -> ID EQUALS expression SEMICOLON .)
    ID              reduce using rule 5 (declaration -> ID EQUALS expression SEMICOLON .)
    PRINTF          reduce using rule 5 (declaration -> ID EQUALS expression SEMICOLON .)
    SCANF           reduce using rule 5 (declaration -> ID EQUALS expression SEMICOLON .)
    IF              reduce using rule 5 (declaration -> ID EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 5 (declaration -> ID EQUALS expression SEMICOLON .)
    $end            reduce using rule 5 (declaration -> ID EQUALS expression SEMICOLON .)
    RBRACE          reduce using rule 5 (declaration -> ID EQUALS expression SEMICOLON .)


state 34

    (16) expression -> expression PLUS . term
    (22) term -> . LPAREN expression RPAREN
    (23) term -> . NUMBER
    (24) term -> . ID

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 25
    ID              shift and go to state 21

    term                           shift and go to state 48

state 35

    (17) expression -> expression MINUS . term
    (22) term -> . LPAREN expression RPAREN
    (23) term -> . NUMBER
    (24) term -> . ID

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 25
    ID              shift and go to state 21

    term                           shift and go to state 49

state 36

    (18) expression -> expression TIMES . term
    (22) term -> . LPAREN expression RPAREN
    (23) term -> . NUMBER
    (24) term -> . ID

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 25
    ID              shift and go to state 21

    term                           shift and go to state 50

state 37

    (19) expression -> expression DIVIDE . term
    (22) term -> . LPAREN expression RPAREN
    (23) term -> . NUMBER
    (24) term -> . ID

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 25
    ID              shift and go to state 21

    term                           shift and go to state 51

state 38

    (20) expression -> expression MOD . term
    (22) term -> . LPAREN expression RPAREN
    (23) term -> . NUMBER
    (24) term -> . ID

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 25
    ID              shift and go to state 21

    term                           shift and go to state 52

state 39

    (22) term -> LPAREN expression . RPAREN
    (16) expression -> expression . PLUS term
    (17) expression -> expression . MINUS term
    (18) expression -> expression . TIMES term
    (19) expression -> expression . DIVIDE term
    (20) expression -> expression . MOD term

    RPAREN          shift and go to state 53
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    MOD             shift and go to state 38


state 40

    (6) declaration -> PRINTF LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 54


state 41

    (7) declaration -> PRINTF LPAREN STRING COMMA . expression RPAREN SEMICOLON
    (16) expression -> . expression PLUS term
    (17) expression -> . expression MINUS term
    (18) expression -> . expression TIMES term
    (19) expression -> . expression DIVIDE term
    (20) expression -> . expression MOD term
    (21) expression -> . term
    (22) term -> . LPAREN expression RPAREN
    (23) term -> . NUMBER
    (24) term -> . ID

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 25
    ID              shift and go to state 21

    expression                     shift and go to state 55
    term                           shift and go to state 23

state 42

    (8) declaration -> SCANF LPAREN STRING COMMA . AMPERSAND ID RPAREN SEMICOLON

    AMPERSAND       shift and go to state 56


state 43

    (9) declaration -> IF LPAREN condition RPAREN . LBRACE declaration_list RBRACE
    (10) declaration -> IF LPAREN condition RPAREN . LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE

    LBRACE          shift and go to state 57


state 44

    (25) condition -> expression EQUALS . expression
    (16) expression -> . expression PLUS term
    (17) expression -> . expression MINUS term
    (18) expression -> . expression TIMES term
    (19) expression -> . expression DIVIDE term
    (20) expression -> . expression MOD term
    (21) expression -> . term
    (22) term -> . LPAREN expression RPAREN
    (23) term -> . NUMBER
    (24) term -> . ID

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 25
    ID              shift and go to state 21

    expression                     shift and go to state 58
    term                           shift and go to state 23

state 45

    (26) condition -> expression NOT_EQUALS . expression
    (16) expression -> . expression PLUS term
    (17) expression -> . expression MINUS term
    (18) expression -> . expression TIMES term
    (19) expression -> . expression DIVIDE term
    (20) expression -> . expression MOD term
    (21) expression -> . term
    (22) term -> . LPAREN expression RPAREN
    (23) term -> . NUMBER
    (24) term -> . ID

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 25
    ID              shift and go to state 21

    expression                     shift and go to state 59
    term                           shift and go to state 23

state 46

    (11) declaration -> WHILE LPAREN condition RPAREN . LBRACE declaration_list RBRACE

    LBRACE          shift and go to state 60


state 47

    (13) ID_list -> ID_list COMMA ID EQUALS . expression
    (16) expression -> . expression PLUS term
    (17) expression -> . expression MINUS term
    (18) expression -> . expression TIMES term
    (19) expression -> . expression DIVIDE term
    (20) expression -> . expression MOD term
    (21) expression -> . term
    (22) term -> . LPAREN expression RPAREN
    (23) term -> . NUMBER
    (24) term -> . ID

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 25
    ID              shift and go to state 21

    expression                     shift and go to state 61
    term                           shift and go to state 23

state 48

    (16) expression -> expression PLUS term .

    SEMICOLON       reduce using rule 16 (expression -> expression PLUS term .)
    PLUS            reduce using rule 16 (expression -> expression PLUS term .)
    MINUS           reduce using rule 16 (expression -> expression PLUS term .)
    TIMES           reduce using rule 16 (expression -> expression PLUS term .)
    DIVIDE          reduce using rule 16 (expression -> expression PLUS term .)
    MOD             reduce using rule 16 (expression -> expression PLUS term .)
    EQUALS          reduce using rule 16 (expression -> expression PLUS term .)
    NOT_EQUALS      reduce using rule 16 (expression -> expression PLUS term .)
    COMMA           reduce using rule 16 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 16 (expression -> expression PLUS term .)


state 49

    (17) expression -> expression MINUS term .

    SEMICOLON       reduce using rule 17 (expression -> expression MINUS term .)
    PLUS            reduce using rule 17 (expression -> expression MINUS term .)
    MINUS           reduce using rule 17 (expression -> expression MINUS term .)
    TIMES           reduce using rule 17 (expression -> expression MINUS term .)
    DIVIDE          reduce using rule 17 (expression -> expression MINUS term .)
    MOD             reduce using rule 17 (expression -> expression MINUS term .)
    EQUALS          reduce using rule 17 (expression -> expression MINUS term .)
    NOT_EQUALS      reduce using rule 17 (expression -> expression MINUS term .)
    COMMA           reduce using rule 17 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 17 (expression -> expression MINUS term .)


state 50

    (18) expression -> expression TIMES term .

    SEMICOLON       reduce using rule 18 (expression -> expression TIMES term .)
    PLUS            reduce using rule 18 (expression -> expression TIMES term .)
    MINUS           reduce using rule 18 (expression -> expression TIMES term .)
    TIMES           reduce using rule 18 (expression -> expression TIMES term .)
    DIVIDE          reduce using rule 18 (expression -> expression TIMES term .)
    MOD             reduce using rule 18 (expression -> expression TIMES term .)
    EQUALS          reduce using rule 18 (expression -> expression TIMES term .)
    NOT_EQUALS      reduce using rule 18 (expression -> expression TIMES term .)
    COMMA           reduce using rule 18 (expression -> expression TIMES term .)
    RPAREN          reduce using rule 18 (expression -> expression TIMES term .)


state 51

    (19) expression -> expression DIVIDE term .

    SEMICOLON       reduce using rule 19 (expression -> expression DIVIDE term .)
    PLUS            reduce using rule 19 (expression -> expression DIVIDE term .)
    MINUS           reduce using rule 19 (expression -> expression DIVIDE term .)
    TIMES           reduce using rule 19 (expression -> expression DIVIDE term .)
    DIVIDE          reduce using rule 19 (expression -> expression DIVIDE term .)
    MOD             reduce using rule 19 (expression -> expression DIVIDE term .)
    EQUALS          reduce using rule 19 (expression -> expression DIVIDE term .)
    NOT_EQUALS      reduce using rule 19 (expression -> expression DIVIDE term .)
    COMMA           reduce using rule 19 (expression -> expression DIVIDE term .)
    RPAREN          reduce using rule 19 (expression -> expression DIVIDE term .)


state 52

    (20) expression -> expression MOD term .

    SEMICOLON       reduce using rule 20 (expression -> expression MOD term .)
    PLUS            reduce using rule 20 (expression -> expression MOD term .)
    MINUS           reduce using rule 20 (expression -> expression MOD term .)
    TIMES           reduce using rule 20 (expression -> expression MOD term .)
    DIVIDE          reduce using rule 20 (expression -> expression MOD term .)
    MOD             reduce using rule 20 (expression -> expression MOD term .)
    EQUALS          reduce using rule 20 (expression -> expression MOD term .)
    NOT_EQUALS      reduce using rule 20 (expression -> expression MOD term .)
    COMMA           reduce using rule 20 (expression -> expression MOD term .)
    RPAREN          reduce using rule 20 (expression -> expression MOD term .)


state 53

    (22) term -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 22 (term -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 22 (term -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 22 (term -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 22 (term -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 22 (term -> LPAREN expression RPAREN .)
    MOD             reduce using rule 22 (term -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 22 (term -> LPAREN expression RPAREN .)
    NOT_EQUALS      reduce using rule 22 (term -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 22 (term -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 22 (term -> LPAREN expression RPAREN .)


state 54

    (6) declaration -> PRINTF LPAREN STRING RPAREN SEMICOLON .

    INT             reduce using rule 6 (declaration -> PRINTF LPAREN STRING RPAREN SEMICOLON .)
    ID              reduce using rule 6 (declaration -> PRINTF LPAREN STRING RPAREN SEMICOLON .)
    PRINTF          reduce using rule 6 (declaration -> PRINTF LPAREN STRING RPAREN SEMICOLON .)
    SCANF           reduce using rule 6 (declaration -> PRINTF LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 6 (declaration -> PRINTF LPAREN STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 6 (declaration -> PRINTF LPAREN STRING RPAREN SEMICOLON .)
    $end            reduce using rule 6 (declaration -> PRINTF LPAREN STRING RPAREN SEMICOLON .)
    RBRACE          reduce using rule 6 (declaration -> PRINTF LPAREN STRING RPAREN SEMICOLON .)


state 55

    (7) declaration -> PRINTF LPAREN STRING COMMA expression . RPAREN SEMICOLON
    (16) expression -> expression . PLUS term
    (17) expression -> expression . MINUS term
    (18) expression -> expression . TIMES term
    (19) expression -> expression . DIVIDE term
    (20) expression -> expression . MOD term

    RPAREN          shift and go to state 62
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    MOD             shift and go to state 38


state 56

    (8) declaration -> SCANF LPAREN STRING COMMA AMPERSAND . ID RPAREN SEMICOLON

    ID              shift and go to state 63


state 57

    (9) declaration -> IF LPAREN condition RPAREN LBRACE . declaration_list RBRACE
    (10) declaration -> IF LPAREN condition RPAREN LBRACE . declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . INT ID_list SEMICOLON
    (5) declaration -> . ID EQUALS expression SEMICOLON
    (6) declaration -> . PRINTF LPAREN STRING RPAREN SEMICOLON
    (7) declaration -> . PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON
    (8) declaration -> . SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (9) declaration -> . IF LPAREN condition RPAREN LBRACE declaration_list RBRACE
    (10) declaration -> . IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (11) declaration -> . WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE

    INT             shift and go to state 4
    ID              shift and go to state 5
    PRINTF          shift and go to state 6
    SCANF           shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    declaration_list               shift and go to state 64
    declaration                    shift and go to state 3

state 58

    (25) condition -> expression EQUALS expression .
    (16) expression -> expression . PLUS term
    (17) expression -> expression . MINUS term
    (18) expression -> expression . TIMES term
    (19) expression -> expression . DIVIDE term
    (20) expression -> expression . MOD term

    RPAREN          reduce using rule 25 (condition -> expression EQUALS expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    MOD             shift and go to state 38


state 59

    (26) condition -> expression NOT_EQUALS expression .
    (16) expression -> expression . PLUS term
    (17) expression -> expression . MINUS term
    (18) expression -> expression . TIMES term
    (19) expression -> expression . DIVIDE term
    (20) expression -> expression . MOD term

    RPAREN          reduce using rule 26 (condition -> expression NOT_EQUALS expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    MOD             shift and go to state 38


state 60

    (11) declaration -> WHILE LPAREN condition RPAREN LBRACE . declaration_list RBRACE
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . INT ID_list SEMICOLON
    (5) declaration -> . ID EQUALS expression SEMICOLON
    (6) declaration -> . PRINTF LPAREN STRING RPAREN SEMICOLON
    (7) declaration -> . PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON
    (8) declaration -> . SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (9) declaration -> . IF LPAREN condition RPAREN LBRACE declaration_list RBRACE
    (10) declaration -> . IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (11) declaration -> . WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE

    INT             shift and go to state 4
    ID              shift and go to state 5
    PRINTF          shift and go to state 6
    SCANF           shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    declaration_list               shift and go to state 65
    declaration                    shift and go to state 3

state 61

    (13) ID_list -> ID_list COMMA ID EQUALS expression .
    (16) expression -> expression . PLUS term
    (17) expression -> expression . MINUS term
    (18) expression -> expression . TIMES term
    (19) expression -> expression . DIVIDE term
    (20) expression -> expression . MOD term

    SEMICOLON       reduce using rule 13 (ID_list -> ID_list COMMA ID EQUALS expression .)
    COMMA           reduce using rule 13 (ID_list -> ID_list COMMA ID EQUALS expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    MOD             shift and go to state 38


state 62

    (7) declaration -> PRINTF LPAREN STRING COMMA expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 66


state 63

    (8) declaration -> SCANF LPAREN STRING COMMA AMPERSAND ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 67


state 64

    (9) declaration -> IF LPAREN condition RPAREN LBRACE declaration_list . RBRACE
    (10) declaration -> IF LPAREN condition RPAREN LBRACE declaration_list . RBRACE ELSE LBRACE declaration_list RBRACE
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . INT ID_list SEMICOLON
    (5) declaration -> . ID EQUALS expression SEMICOLON
    (6) declaration -> . PRINTF LPAREN STRING RPAREN SEMICOLON
    (7) declaration -> . PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON
    (8) declaration -> . SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (9) declaration -> . IF LPAREN condition RPAREN LBRACE declaration_list RBRACE
    (10) declaration -> . IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (11) declaration -> . WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE

    RBRACE          shift and go to state 68
    INT             shift and go to state 4
    ID              shift and go to state 5
    PRINTF          shift and go to state 6
    SCANF           shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    declaration                    shift and go to state 10

state 65

    (11) declaration -> WHILE LPAREN condition RPAREN LBRACE declaration_list . RBRACE
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . INT ID_list SEMICOLON
    (5) declaration -> . ID EQUALS expression SEMICOLON
    (6) declaration -> . PRINTF LPAREN STRING RPAREN SEMICOLON
    (7) declaration -> . PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON
    (8) declaration -> . SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (9) declaration -> . IF LPAREN condition RPAREN LBRACE declaration_list RBRACE
    (10) declaration -> . IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (11) declaration -> . WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE

    RBRACE          shift and go to state 69
    INT             shift and go to state 4
    ID              shift and go to state 5
    PRINTF          shift and go to state 6
    SCANF           shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    declaration                    shift and go to state 10

state 66

    (7) declaration -> PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON .

    INT             reduce using rule 7 (declaration -> PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON .)
    ID              reduce using rule 7 (declaration -> PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON .)
    PRINTF          reduce using rule 7 (declaration -> PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON .)
    SCANF           reduce using rule 7 (declaration -> PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON .)
    IF              reduce using rule 7 (declaration -> PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 7 (declaration -> PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON .)
    $end            reduce using rule 7 (declaration -> PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 7 (declaration -> PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON .)


state 67

    (8) declaration -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 70


state 68

    (9) declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE .
    (10) declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE . ELSE LBRACE declaration_list RBRACE

    INT             reduce using rule 9 (declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE .)
    ID              reduce using rule 9 (declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE .)
    PRINTF          reduce using rule 9 (declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE .)
    SCANF           reduce using rule 9 (declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE .)
    IF              reduce using rule 9 (declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 9 (declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE .)
    $end            reduce using rule 9 (declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 9 (declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE .)
    ELSE            shift and go to state 71


state 69

    (11) declaration -> WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE .

    INT             reduce using rule 11 (declaration -> WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE .)
    ID              reduce using rule 11 (declaration -> WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE .)
    PRINTF          reduce using rule 11 (declaration -> WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE .)
    SCANF           reduce using rule 11 (declaration -> WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE .)
    IF              reduce using rule 11 (declaration -> WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 11 (declaration -> WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE .)
    $end            reduce using rule 11 (declaration -> WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 11 (declaration -> WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE .)


state 70

    (8) declaration -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .

    INT             reduce using rule 8 (declaration -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    ID              reduce using rule 8 (declaration -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    PRINTF          reduce using rule 8 (declaration -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    SCANF           reduce using rule 8 (declaration -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    IF              reduce using rule 8 (declaration -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 8 (declaration -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    $end            reduce using rule 8 (declaration -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)
    RBRACE          reduce using rule 8 (declaration -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON .)


state 71

    (10) declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE . LBRACE declaration_list RBRACE

    LBRACE          shift and go to state 72


state 72

    (10) declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE . declaration_list RBRACE
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . INT ID_list SEMICOLON
    (5) declaration -> . ID EQUALS expression SEMICOLON
    (6) declaration -> . PRINTF LPAREN STRING RPAREN SEMICOLON
    (7) declaration -> . PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON
    (8) declaration -> . SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (9) declaration -> . IF LPAREN condition RPAREN LBRACE declaration_list RBRACE
    (10) declaration -> . IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (11) declaration -> . WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE

    INT             shift and go to state 4
    ID              shift and go to state 5
    PRINTF          shift and go to state 6
    SCANF           shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    declaration_list               shift and go to state 73
    declaration                    shift and go to state 3

state 73

    (10) declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list . RBRACE
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . INT ID_list SEMICOLON
    (5) declaration -> . ID EQUALS expression SEMICOLON
    (6) declaration -> . PRINTF LPAREN STRING RPAREN SEMICOLON
    (7) declaration -> . PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON
    (8) declaration -> . SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON
    (9) declaration -> . IF LPAREN condition RPAREN LBRACE declaration_list RBRACE
    (10) declaration -> . IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (11) declaration -> . WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE

    RBRACE          shift and go to state 74
    INT             shift and go to state 4
    ID              shift and go to state 5
    PRINTF          shift and go to state 6
    SCANF           shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    declaration                    shift and go to state 10

state 74

    (10) declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .

    INT             reduce using rule 10 (declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    ID              reduce using rule 10 (declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    PRINTF          reduce using rule 10 (declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    SCANF           reduce using rule 10 (declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    IF              reduce using rule 10 (declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 10 (declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    $end            reduce using rule 10 (declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 10 (declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)

