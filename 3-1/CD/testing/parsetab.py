
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND COMMA DIVIDE ELSE EQUALS ID IF INT LBRACE LPAREN MINUS MOD NOT_EQUALS NUMBER OR PLUS PRINTF RBRACE RPAREN SCANF SEMICOLON STRING TIMES WHILEprogram : declaration_listdeclaration_list : declaration_list declaration\n                        | declarationdeclaration : INT ID_list SEMICOLON\n                   | ID EQUALS expression SEMICOLON\n                   | PRINTF LPAREN STRING RPAREN SEMICOLON\n                   | PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON\n                   | SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON\n                   | IF LPAREN condition RPAREN LBRACE declaration_list RBRACE\n                   | IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE\n                   | WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACEID_list : ID_list COMMA ID\n               | ID_list COMMA ID EQUALS expression\n               | ID\n               | ID EQUALS expressionexpression : expression PLUS term\n                  | expression MINUS term\n                  | expression TIMES term\n                  | expression DIVIDE term\n                  | expression MOD term\n                  | termterm : LPAREN expression RPAREN\n            | NUMBER\n            | IDcondition : expression EQUALS expression\n                 | expression NOT_EQUALS expression'
    
_lr_action_items = {'INT':([0,2,3,10,18,33,54,57,60,64,65,66,68,69,70,72,73,74,],[4,4,-3,-2,-4,-5,-6,4,4,4,4,-7,-9,-11,-8,4,4,-10,]),'ID':([0,2,3,4,10,13,16,17,18,19,20,24,33,34,35,36,37,38,41,44,45,47,54,56,57,60,64,65,66,68,69,70,72,73,74,],[5,5,-3,12,-2,21,21,21,-4,31,21,21,-5,21,21,21,21,21,21,21,21,21,-6,63,5,5,5,5,-7,-9,-11,-8,5,5,-10,]),'PRINTF':([0,2,3,10,18,33,54,57,60,64,65,66,68,69,70,72,73,74,],[6,6,-3,-2,-4,-5,-6,6,6,6,6,-7,-9,-11,-8,6,6,-10,]),'SCANF':([0,2,3,10,18,33,54,57,60,64,65,66,68,69,70,72,73,74,],[7,7,-3,-2,-4,-5,-6,7,7,7,7,-7,-9,-11,-8,7,7,-10,]),'IF':([0,2,3,10,18,33,54,57,60,64,65,66,68,69,70,72,73,74,],[8,8,-3,-2,-4,-5,-6,8,8,8,8,-7,-9,-11,-8,8,8,-10,]),'WHILE':([0,2,3,10,18,33,54,57,60,64,65,66,68,69,70,72,73,74,],[9,9,-3,-2,-4,-5,-6,9,9,9,9,-7,-9,-11,-8,9,9,-10,]),'$end':([1,2,3,10,18,33,54,66,68,69,70,74,],[0,-1,-3,-2,-4,-5,-6,-7,-9,-11,-8,-10,]),'RBRACE':([3,10,18,33,54,64,65,66,68,69,70,73,74,],[-3,-2,-4,-5,-6,68,69,-7,-9,-11,-8,74,-10,]),'EQUALS':([5,12,21,23,25,29,31,48,49,50,51,52,53,],[13,20,-24,-21,-23,44,47,-16,-17,-18,-19,-20,-22,]),'LPAREN':([6,7,8,9,13,16,17,20,24,34,35,36,37,38,41,44,45,47,],[14,15,16,17,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'SEMICOLON':([11,12,21,22,23,25,31,32,40,48,49,50,51,52,53,61,62,67,],[18,-14,-24,33,-21,-23,-12,-15,54,-16,-17,-18,-19,-20,-22,-13,66,70,]),'COMMA':([11,12,21,23,25,26,27,31,32,48,49,50,51,52,53,61,],[19,-14,-24,-21,-23,41,42,-12,-15,-16,-17,-18,-19,-20,-22,-13,]),'NUMBER':([13,16,17,20,24,34,35,36,37,38,41,44,45,47,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'STRING':([14,15,],[26,27,]),'PLUS':([21,22,23,25,29,32,39,48,49,50,51,52,53,55,58,59,61,],[-24,34,-21,-23,34,34,34,-16,-17,-18,-19,-20,-22,34,34,34,34,]),'MINUS':([21,22,23,25,29,32,39,48,49,50,51,52,53,55,58,59,61,],[-24,35,-21,-23,35,35,35,-16,-17,-18,-19,-20,-22,35,35,35,35,]),'TIMES':([21,22,23,25,29,32,39,48,49,50,51,52,53,55,58,59,61,],[-24,36,-21,-23,36,36,36,-16,-17,-18,-19,-20,-22,36,36,36,36,]),'DIVIDE':([21,22,23,25,29,32,39,48,49,50,51,52,53,55,58,59,61,],[-24,37,-21,-23,37,37,37,-16,-17,-18,-19,-20,-22,37,37,37,37,]),'MOD':([21,22,23,25,29,32,39,48,49,50,51,52,53,55,58,59,61,],[-24,38,-21,-23,38,38,38,-16,-17,-18,-19,-20,-22,38,38,38,38,]),'NOT_EQUALS':([21,23,25,29,48,49,50,51,52,53,],[-24,-21,-23,45,-16,-17,-18,-19,-20,-22,]),'RPAREN':([21,23,25,26,28,30,39,48,49,50,51,52,53,55,58,59,63,],[-24,-21,-23,40,43,46,53,-16,-17,-18,-19,-20,-22,62,-25,-26,67,]),'AMPERSAND':([42,],[56,]),'LBRACE':([43,46,71,],[57,60,72,]),'ELSE':([68,],[71,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,57,60,72,],[2,64,65,73,]),'declaration':([0,2,57,60,64,65,72,73,],[3,10,3,3,10,10,3,10,]),'ID_list':([4,],[11,]),'expression':([13,16,17,20,24,41,44,45,47,],[22,29,29,32,39,55,58,59,61,]),'term':([13,16,17,20,24,34,35,36,37,38,41,44,45,47,],[23,23,23,23,23,48,49,50,51,52,23,23,23,23,]),'condition':([16,17,],[28,30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','test.py',81),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','test.py',85),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','test.py',86),
  ('declaration -> INT ID_list SEMICOLON','declaration',3,'p_declaration','test.py',93),
  ('declaration -> ID EQUALS expression SEMICOLON','declaration',4,'p_declaration','test.py',94),
  ('declaration -> PRINTF LPAREN STRING RPAREN SEMICOLON','declaration',5,'p_declaration','test.py',95),
  ('declaration -> PRINTF LPAREN STRING COMMA expression RPAREN SEMICOLON','declaration',7,'p_declaration','test.py',96),
  ('declaration -> SCANF LPAREN STRING COMMA AMPERSAND ID RPAREN SEMICOLON','declaration',8,'p_declaration','test.py',97),
  ('declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE','declaration',7,'p_declaration','test.py',98),
  ('declaration -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE','declaration',11,'p_declaration','test.py',99),
  ('declaration -> WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE','declaration',7,'p_declaration','test.py',100),
  ('ID_list -> ID_list COMMA ID','ID_list',3,'p_ID_list','test.py',119),
  ('ID_list -> ID_list COMMA ID EQUALS expression','ID_list',5,'p_ID_list','test.py',120),
  ('ID_list -> ID','ID_list',1,'p_ID_list','test.py',121),
  ('ID_list -> ID EQUALS expression','ID_list',3,'p_ID_list','test.py',122),
  ('expression -> expression PLUS term','expression',3,'p_expression','test.py',133),
  ('expression -> expression MINUS term','expression',3,'p_expression','test.py',134),
  ('expression -> expression TIMES term','expression',3,'p_expression','test.py',135),
  ('expression -> expression DIVIDE term','expression',3,'p_expression','test.py',136),
  ('expression -> expression MOD term','expression',3,'p_expression','test.py',137),
  ('expression -> term','expression',1,'p_expression','test.py',138),
  ('term -> LPAREN expression RPAREN','term',3,'p_term','test.py',145),
  ('term -> NUMBER','term',1,'p_term','test.py',146),
  ('term -> ID','term',1,'p_term','test.py',147),
  ('condition -> expression EQUALS expression','condition',3,'p_condition','test.py',156),
  ('condition -> expression NOT_EQUALS expression','condition',3,'p_condition','test.py',157),
]
